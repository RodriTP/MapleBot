import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import linregress
import array as arr 
import math

#Sert à représenter les données qui seront reçus par le robot (À ENLEVER APRÈS)
data = np.array([[1.1938581609876833,0.7421619548480648], 
[1.1476578409450315,1.342766115402536], 
[1.1476578409450315,1.8047693158290525], 
[1.1476578409450315,2.3129728362982207], 
[1.1476578409450315,2.86737667681004], 
[1.2400584810303352,4.068584997918983], 
[1.1938581609876833,4.946391078729365], 
[1.3786594411582906,6.147599399838307], 
[1.4710600812435943,7.903211561459069], 
[2.025463921755416,8.78101764226945], 
[5.767689845210213,8.365214761885586], 
[7.338500726660374,8.45761540197089], 
[9.140313208323795,8.596216362098843], 
[11.173127290200474,8.78101764226945], 
[13.529343612375717,8.873418282354754], 
[15.423556734124443,8.873418282354754], 
[17.872173696384987,8.78101764226945], 
[18.888580737323327,8.688617002184147], 
[20.921394819200007,7.903211561459069], 
[21.059995779327963,6.471001640136868], 
[21.106196099370614,3.2831795571939053], 
[21.152396419413265,2.543974436511479], 
[20.78279385907205,4.853990438644061], 
[1.4248597612009424,-0.6438476464314844], 
[0.9628565607744244,9.196820522653315], 
[0.7318549605611653,7.903211561459069], 
[0.7318549605611653,6.655802920307475], 
[0.6856546405185134,5.454594599198533], 
[0.45465304030525444,4.207185958046938], 
[0.3622524002199508,3.0983782770232984], 
[0.45465304030525444,1.9895705959996592], 
[0.547053680390558,0.973163555061323], 
[0.7318549605611653,-0.7824486065594394], 
[2.8570696825231483,2.4515737964261755], 
[3.134271602779059,5.777996839497094], 
[3.1804719228217113,6.979205160606036], 
[3.503874163120274,10.76763140410347], 
[3.0418709626937557,8.596216362098843], 
[8.170106487428107,11.04483332435938], 
[11.219327610243125,10.76763140410347], 
[13.0673404119492,10.72143108406082], 
[19.76638681813371,10.44422916380491], 
[21.429598339669177,10.028426283421044], 
[22.168803460351604,8.041812521587024], 
[22.168803460351604,3.97618435783368], 
[22.399805060564866,1.9433702759570075], 
[19.396784257792497,7.6722099612458114], 
[19.72018649809106,3.560381477449815], 
[22.122603140308954,-2.260858847924292], 
[21.059995779327963,1.4351667554878396], 
[21.845401220053045,2.543974436511479], 
[20.644192898944095,2.913576996852692], 
[20.875194499157356,4.068584997918983], 
[21.70680025992509,4.622988838430802], 
[21.660599939882434,5.546995239283835], 
[21.568199299797133,7.348807720947249], 
[20.413191298730837,6.0551987597530035], 
[20.551792258858793,7.164006440776643], 
[21.75300057996774,8.642416682141496], 
[21.013795459285312,9.289221162738619], 
[20.22839001856023,9.520222762951876], 
[22.584606340735473,8.7348173222268], 
[21.79920090001039,6.886804520520733], 
[21.568199299797133,6.101399079795655], 
[19.858787458219016,9.658823723079832], 
[18.565178497024764,9.658823723079832], 
[18.056974976555594,9.658823723079832], 
[16.994367615574603,9.566423082994529], 
[16.301362814934826,9.566423082994529], 
[15.37735641408179,9.566423082994529], 
[1.8868629616274606,9.566423082994529], 
[3.5962748032055774,9.705024043122483], 
[4.797483124314525,9.705024043122483], 
[5.4904879249543015,9.658823723079832], 
[5.998691445423471,9.658823723079832], 
[6.7378965661059,9.61262340303718], 
[7.939104887214848,9.705024043122483], 
[9.047912568238491,9.705024043122483], 
[9.694717048835615,9.705024043122483], 
[11.265527930285778,9.705024043122483], 
[12.79013849169329,9.705024043122483], 
[13.898946172716933,9.843625003250438], 
[14.499550333271406,9.705024043122483], 
[13.159741052034503,9.61262340303718], 
[12.05093337101086,9.520222762951876], 
[10.433922169518045,9.61262340303718], 
[8.354907767598714,9.61262340303718], 
[7.384701046703026,9.61262340303718], 
[4.104478323674748,9.61262340303718], 
[2.8108693624804966,9.566423082994529], 
[1.8406626415848086,7.4874086810752045], 
[1.5634607213288978,7.164006440776643], 
[1.7020616814568532,5.639395879369139], 
[0.8242556006464689,-1.4292530871565623],
[1.4248597612009424,0.14155779429359347],
[0.6394543204758617,-0.13564412596231637],
[0.7318549605611653,-3.0000639686067183],
[1.2400584810303352,-3.785469409331796],
[2.487467122181934,-3.6468684492038412],
[4.196878963760051,-3.5544678091185378],
[2.071664241798068,-3.04626428864937],
[3.873476723461488,-3.0000639686067183],
[3.5962748032055774,-3.6468684492038412],
[6.183492725594078,-3.5544678091185378],
[6.784096886148553,-3.3234662089052796],
[6.368294005764686,-2.815262688436112],
[5.120885364613087,-2.7228620483508084],
[5.767689845210213,-2.7228620483508084],
[3.5500744831629256,-2.7228620483508084],
[2.8570696825231483,-2.6766617283081566],
[2.1178645618407197,-2.538060768180202],
[1.5634607213288978,-2.49186044813755],
[1.8406626415848086,-3.3696665289479313],
[6.96889816631916,-5.4948812509099065],
[6.599295605977945,-5.818283491208469],
[6.553095285935293,-6.372687331720288],
[7.1536994464897665,-6.788490212104153],
[7.4771016867883295,-4.108871649630357],
[7.107499126447115,-4.386073569886268],
[7.846704247129543,-7.1118924524027145],
[20.846704247129543,-7.1118924524027145],
[21.219456247129543,-7.25553544524027145],
[19.846704247129543,-7.1118915987427145],
[18.846704247129543,-8.1118924524027145],
[17.846704247129543,-7.572924524027145],
[16.846704247129543,-7.27272754524027145],
[15.846704247129543,-6.1118924524027145],
[14.846704247129543,-7.8254524524027145],
[13.846704247129543,-7.57224524027145],
[12.846704247129543,-7.987465324027145],
[19.9931662430911,-6.561240893920551], 
[21.363923280600112,-6.70183135930609], 
[20.121304097919356,-6.490945661227781], 
[19.84353729889222,-6.3503551958422415], 
[12.235785425771855,-6.490945661227781], 
[12.302666526720685,-6.490945661227781], 
[11.248238036329138,-6.561240893920551], 
[9.701742917088202,-6.561240893920551], 
[10.228957162283976,-6.63153612661332], 
[7.701742917088202,-6.561240893920551], 
[5.701742917088202,-6.63153612661332], 
[6.701742917088202,-6.3503551958422415], 
[9.701742917088202,-6.490945661227781], 
[22.390032418133153,2.01477749459736], 
[21.897965789283763,-0.44555564964958155], 
[21.897965789283763,-1.5702793727338977], 
[22.249441952747613,-2.6598554794718288], 
[21.687080091205456,1.2063823186305078], 
[22.390032418133153,-4.136055366019994], 
[22.179146720054842,-6.280059963149472], 
[22.319737185440385,-5.19048385641154], 
[12.935323620955614,-6.3503551958422415], 
[9.701742917088202,-6.526093277574166], 
[7.701742917088202,-6.3503551958422415], 
[9.736890533434586,-6.526093277574166],
[9.701742917088202,-6.069174265071162], 
[8.701742917088202,-6.70183135930609], 
[6.736890533434586,-6.209764730456702], 
[5.701742917088202,-6.209764730456702], 
[9.701742917088202,-5.682550485260928], 
[10.861614256518903,-6.3503551958422415], 
[10.75617140747975,-6.70183135930609], 
[9.701742917088202,-6.526093277574166], 
[9.701742917088202,-5.928583799685622], 
[10.05321908055205,-6.034026648724777],
[9.912628615166511,-6.8424218246916295], 
[14.8332949036604,-5.787993334300083], 
[15.009032985392324,-6.63153612661332], 
[15.887723394051946,-5.577107636221774], 
[18.48523287194049,-6.912717057384399], 
[17.153037582521804,-5.682550485260928], 
[18.06687560752781,-7.018159906423554], 
[18.13717084022058,-5.6474028689145435], 
[19.964846890232593,-6.490945661227781], 
[18.246027821003675,-5.4013695544898495], 
[18.30045631139522,-6.877569441038014], 
[18.30387044313916,-5.295926705450695], 
[19.65193247485907,-3.7142839698633754], 
[21.65193247485907,-4.557826762176612], 
[20.23357521044639,-2.976184026589293], 
[19.757375323898223,-2.2732316996615953], 
[19.565770499865078,-0.6212937313815059], 
[21.51134200947353,0.5737252243955799], 
[21.948980147931373,1.7687441801726658], 
[20.460327650825924,0.8549061551666589], 
[20.390032418133153,1.7687441801726658]])

espacement = 0.1


def trouverMaxX(data):  #Pour trouver la valeur maximale en X
    maxX = data[0,0]
    for point in range(len(data)):
        if maxX < data[point,0]:
            maxX = data[point,0]
        
     
    return maxX

def trouverMinX(data):  #Pour trouver la valeur minimale en X
    minX = data[0,0]
    for point in range(len(data)):
        if minX > data[point,0]:
            minX = data[point,0]
        
     
    return minX

def trouverMaxY(data):  #Pour trouver la valeur maximale en Y
    maxY = data[0,1]
    for point in range(len(data)):
        if maxY < data[point,1]:
            maxY = data[point,1]
        
     
    return maxY

def trouverMinY(data):  #Pour trouver la valeur minimale en Y
    minY = data[0,1]
    for point in range(len(data)):
        if minY > data[point,1]:
            minY = data[point,1]
        
     
    return minY


#-- Les méthodes d'écart types risques d'être inutiles --

def ecartTypeX(data):  #Écart type de la coordonée X de chaque point
    sommeX = 0
    for point in range(len(data)):
        sommeX += data[point, 0]
    moyenneX = sommeX/len(data)

    sommeEcartX = 0
    for point in range(len(data)):
        sommeEcartX += pow((data[point, 0]-moyenneX), 2)
    
    return (math.sqrt(sommeEcartX/len(data)))

def ecartTypeY(data):  #Écart type de la coordonée Y de chaque point
    sommeY = 0
    for point in range(len(data)):
        sommeY += data[point, 1]
    moyenneY = sommeY/len(data)

    sommeEcartY = 0
    for point in range(len(data)):
        sommeEcartY += pow((data[point, 1]-moyenneY), 2)
    
    return (math.sqrt(sommeEcartY/len(data)))



class grilleSalle:
        mur = False
        dataGrille = []
        quantite = 0
        limiteSuppX = 0
        limiteInfX = 0
        limiteSuppY = trouverMaxY(data)
        limiteInfY = trouverMaxY(data)

def creerGrille(data):
    grille = [[grilleSalle for i in range(int((trouverMaxX(data)-trouverMinX(data))/espacement)+1)] for j in range(int((trouverMaxY(data)-trouverMinY(data))/espacement)+1)]
    pointeurLimSuppX = 0
    pointeurLimInfX = 0
    
    for i in range(len(grille[0])):
        pointeurLimSuppY = trouverMaxY(data)
        pointeurLimInfY = trouverMaxY(data)
        pointeurLimInfX= pointeurLimSuppX

        if (trouverMaxX(data) - pointeurLimSuppX) < espacement:
            pointeurLimSuppX = trouverMaxX(data)
        else: 
            pointeurLimSuppX += espacement

        for j in range (len(grille)):
            pointeurLimSuppY = pointeurLimInfY
            if abs(trouverMinY(data) - pointeurLimInfX) < espacement:
                pointeurLimSuppY = 0
            else: 
                pointeurLimInfY -= espacement
            

            grille[i][j].limiteSuppX = pointeurLimSuppX
            grille[i][j].limiteInfX = pointeurLimInfX
            grille[i][j].limiteSuppY = pointeurLimSuppY
            grille[i][j].limiteInfY = pointeurLimInfY
            print("Point (", i, ", ", j, ") : LimiteSuppX = ", grille[i][j].limiteSuppX, "; LimiteInfX = ", grille[i][j].limiteInfX, "; LimiteSuppY = ", grille[i][j].limiteSuppY, "; LimiteInfY = ",grille[i][j].limiteInfY)
    

            


creerGrille(data)



plt.scatter(data[:,0], data[:,1]) # Ajoute le nuage de point, c-à-d les données que le robot à collecter, au plot 

stats = linregress(data[:,0], data[:,1]) # Régression linéaire
f = stats.slope * data[:,0] + stats.intercept # Droite
plt.plot(data[:,0], f, color="red") # Ajouter la droite au plot

#plt.xlim([0, 25])
#plt.ylim([10, 15])

plt.show() # afficher le tout
